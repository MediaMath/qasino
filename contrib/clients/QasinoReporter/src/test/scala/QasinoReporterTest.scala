/**
 * Created by dpowell on 1/29/14.
 */

import java.util
import org.scalatest._
import mediamath.metrics._
import com.codahale.metrics._
import com.fasterxml.jackson.module.scala._
import com.fasterxml.jackson.databind.ObjectMapper
import collection._
import java.lang.reflect.{Type, ParameterizedType}

class QasinoReporterTest extends FlatSpec with Matchers {
	// name sanitization checks
	val sep = QasinoReporter.registryNameSeparator
	"A sanitized registry name" should "replace non-alphanumeric characters with underscores" in {
		QasinoReporter.sanitizeRegistryName("testing.123") should be ("testing" + sep + "123")
	}
	it should "change all uppercase characters to lowercase" in {
		QasinoReporter.sanitizeRegistryName("tEsT") should be ("test")
	}

	"The QasinoReporterBuilder" should "throw an IllegalArgumentException if two metrics are built with names that are the same after sanitation" in {
		val counter1 = new Counter
		val counter2 = new Counter
		val metrics = new MetricRegistry
		metrics.register(MetricRegistry.name("testing_123"), counter1)
		metrics.register(MetricRegistry.name("testing.123"), counter2)
		intercept[IllegalArgumentException] {
			new QasinoReporterBuilder().withRegistry(metrics).build()
		}
	}

	// JSON validation
	val mapper = new ObjectMapper()
	mapper.registerModule(DefaultScalaModule)
	"The JSON generated by two separated metrics" should "be reported separately" in {
		val counter1 = new Counter
		val counter1name = "testing_123"
		val counter2 = new Counter
		val counter2name = "testing_456"
		val metrics = new MetricRegistry
		metrics.register(MetricRegistry.name(counter1name), counter1)
		metrics.register(MetricRegistry.name(counter2name), counter2)
		val reporter = new QasinoReporterBuilder().withRegistry(metrics).build()
		val groupedMetrics = reporter.groupMetrics(Map(counter1name -> counter1, counter2name -> counter2))
		val groupPrefix = "nothing_in_common"
		val jsonStr = reporter.getGroupedJson(groupedMetrics, groupPrefix)
		val dataMap = mapper.readValue(jsonStr, classOf[Map[String, Any]])
		//TODO: fix this to use the QasinoRequestIdentifier enum
		println(" dp-> all the json: " + jsonStr)
		assert(dataMap.keys.size === 2)
		assert(dataMap.getOrElse("op", "") === "add_table_data")
		assert(dataMap.getOrElse("op", "") === "add_table_data")
		assert(dataMap.getOrElse("op", "") === "add_table_data")
	}
}
